import logging
from decimal import Decimal, InvalidOperation
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
import os
from database import add_transaction, get_balance, init_db

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/income 1000 –∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "/expense 300 –ø—Ä–æ–¥—É–∫—Ç—ã ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/balance ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å"
    )

async def income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_transaction(update, context, "income")

async def expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_transaction(update, context, "expense")

async def handle_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE, trans_type: str):
    user_id = update.effective_user.id
    args = context.args

    if len(args) < 1:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Å—É–º–º—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n–ü—Ä–∏–º–µ—Ä: /income 5000 –∑–∞—Ä–ø–ª–∞—Ç–∞")
        return

    try:
        amount = Decimal(args[0])
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except (InvalidOperation, ValueError) as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    category = " ".join(args[1:]) if len(args) > 1 else "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    add_transaction(user_id, float(amount), category, trans_type)

    action = "–¥–æ—Ö–æ–¥" if trans_type == "income" else "—Ä–∞—Å—Ö–æ–¥"
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {action}: {amount} —Ä—É–±. ({category})")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    income_total, expense_total = get_balance(user_id)
    balance_total = income_total - expense_total

    await update.message.reply_text(
        f"üìä –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:\n"
        f"–î–æ—Ö–æ–¥—ã: {income_total:.2f} ‚ÇΩ\n"
        f"–†–∞—Å—Ö–æ–¥—ã: {expense_total:.2f} ‚ÇΩ\n"
        f"–û—Å—Ç–∞—Ç–æ–∫: {balance_total:.2f} ‚ÇΩ"
    )

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

    init_db()

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("income", income))
    app.add_handler(CommandHandler("expense", expense))
    app.add_handler(CommandHandler("balance", balance))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()